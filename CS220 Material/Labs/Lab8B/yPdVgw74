`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:35:14 05/10/2018 
// Design Name: 
// Module Name:    register_file 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: Authored by Mainak Chaudhuri
//
//////////////////////////////////////////////////////////////////////////////////
`include "state_defs.v"

module register_file(clk, current_state, readAddr, writeAddr, writeValue, readValid, writeValid, readValue
    );

   	input clk;
	input [2:0] current_state;
	input [4:0] readAddr;
	input [4:0] writeAddr;
	input [15:0] writeValue;
	input readValid;
	input writeValid;
	
	output [15:0] readValue;
	
	reg [15:0] readValue;
	
	reg [15:0] regfile [0:31];
	
	initial begin
	   	regfile[0] = 0;
		regfile[1] = 0;
		regfile[2] = 0;
		regfile[3] = 0;
		regfile[4] = 0;
		regfile[5] = 0;
		regfile[6] = 0;
		regfile[7] = 0;
		regfile[8] = 0;
		regfile[9] = 0;
		regfile[10] = 0;
		regfile[11] = 0;
		regfile[12] = 0;
		regfile[13] = 0;
		regfile[14] = 0;
		regfile[15] = 0;
		regfile[16] = 0;
		regfile[17] = 0;
		regfile[18] = 0;
		regfile[19] = 0;
		regfile[20] = 0;
		regfile[21] = 0;
		regfile[22] = 0;
		regfile[23] = 0;
		regfile[24] = 0;
		regfile[25] = 0;
		regfile[26] = 0;
		regfile[27] = 0;
		regfile[28] = 0;
		regfile[29] = 0;
		regfile[30] = 0;
		regfile[31] = 0;
	end
	
	always @ (posedge clk) begin
	   	if (current_state == `STATE_RF_RW) begin
		   	if (readValid == 1) begin
			   	readValue <= regfile[readAddr];
			end
			if (writeValid == 1) begin
			   	regfile[writeAddr] <= writeValue;
			end
		end
		else if (current_state == `STATE_RF_W) begin
		   	regfile[writeAddr] <= writeValue;
		end
		else if (current_state == `STATE_RF_R) begin
		   	readValue <= regfile[readAddr];
		end
	end

endmodule
