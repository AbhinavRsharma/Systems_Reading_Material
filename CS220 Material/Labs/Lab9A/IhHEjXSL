`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:33:46 04/25/2018 
// Design Name: 
// Module Name:    fetch 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: Authored by Mainak Chaudhuri
//
//////////////////////////////////////////////////////////////////////////////////
`define MAX_PC 8

module fetch(instruction_reg, instruction_reg_valid, done, clk
    );

	input clk;
	
   	output [31:0] instruction_reg;
	output instruction_reg_valid;
	output done;
	
	reg [31:0] instruction_reg;
	reg instruction_reg_valid;
	reg done;
	
	reg [3:0] pc;
	reg [31:0] ins_mem [0:7];
	
	initial begin
	   	ins_mem[0] = 32'b001000_00000_00100_0011_0100_0101_0110;   // addi $4, $0, 0x3456
		ins_mem[1] = 32'b001000_00000_00101_1111_1111_1111_1111;   // addi $5, $0, 0xffff
		ins_mem[2] = 32'b000000_00101_00100_00110_00000_100000;    // add  $6, $5, $4
		ins_mem[3] = 32'b001000_00000_00011_0000_0000_0000_0111;   // addi $3, $0, 0x7
		ins_mem[4] = 32'b000000_00011_00110_00110_00000_000100;    // sllv $6, $6, $3
		ins_mem[5] = 32'b000000_00000_00011_00011_00001_000010;    // srl  $3, $3, 0x1
		ins_mem[6] = 32'b100011_00100_00101_1001_1010_1011_1100;   // lw   $5, 0x9abc($4)
		ins_mem[7] = 32'b000010_00_0001_0010_0011_0100_0101_0110;  // j    0x123456
		pc = 4'b0000;
		done = 0;
		instruction_reg = 32'b0;
		instruction_reg_valid = 0;
	end
	
	always @ (posedge clk) begin
	   	if (done == 1'b0) begin
	      		instruction_reg <= ins_mem[pc];
			instruction_reg_valid <= 1'b1;
		   	pc <= pc + 1;
		end
		if (pc == `MAX_PC) begin
		   	done <= 1'b1;
		end
	end

endmodule
